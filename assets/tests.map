{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","calculator/tests/integration/components/calc-test.js","calculator/tests/integration/components/theme-switch-test.js","calculator/tests/integration/components/theme-test.js","calculator/tests/lint/app.lint-test.js","calculator/tests/lint/templates.template.lint-test.js","calculator/tests/lint/tests.lint-test.js","calculator/tests/test-helper.js","calculator/tests/unit/adapters/application-test.js","calculator/tests/unit/adapters/colors-test.js","calculator/tests/unit/adapters/server-test.js","calculator/tests/unit/adapters/themes-test.js","calculator/tests/unit/models/attribute-test.js","calculator/tests/unit/models/attributes-test.js","calculator/tests/unit/models/theme-test.js","calculator/tests/unit/models/themes-test.js","calculator/tests/unit/routes/colors-test.js","calculator/tests/unit/routes/home-test.js","calculator/tests/unit/routes/index-test.js","calculator/tests/unit/routes/theme-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"calculator/tests/integration/components/calc-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | calc', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VVyOEUbD\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"calc\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cFpfVl2E\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"calc\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"calculator/tests/integration/components/theme-switch-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | theme-switch', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"l5YwKHSR\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"theme-switch\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cVnLv/eI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"theme-switch\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"calculator/tests/integration/components/theme-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | theme', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"MIKX90z0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"theme\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"NeVwBJA5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"theme\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"calculator/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('adapters/theme.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/theme.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/calc.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/calc.js should pass ESLint\\n\\n27:42 - Unnecessary escape character: \\\\*. (no-useless-escape)\\n27:44 - Unnecessary escape character: \\\\+. (no-useless-escape)\\n27:48 - Unnecessary escape character: \\\\/. (no-useless-escape)');\n  });\n  QUnit.test('components/theme.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/theme.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/theme.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/theme.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/colors.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/colors.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/theme.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/theme.js should pass ESLint\\n\\n');\n  });\n});","define(\"calculator/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('calculator/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'calculator/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('calculator/templates/components/calc.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'calculator/templates/components/calc.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('calculator/templates/components/theme.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'calculator/templates/components/theme.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('calculator/templates/home.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'calculator/templates/home.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('calculator/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'calculator/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('calculator/templates/theme.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'calculator/templates/theme.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"calculator/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/calc-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/calc-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/theme-switch-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/theme-switch-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/theme-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/theme-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/colors-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/colors-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/server-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/server-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/themes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/themes-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/attribute-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/attribute-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/attributes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/attributes-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/theme-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/theme-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/themes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/themes-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/colors-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/colors-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/theme-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/theme-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"calculator/tests/test-helper\", [\"calculator/app\", \"calculator/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"calculator/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"calculator/tests/unit/adapters/colors-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | colors', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:colors');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"calculator/tests/unit/adapters/server-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | server', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:server');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"calculator/tests/unit/adapters/themes-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | themes', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:themes');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"calculator/tests/unit/models/attribute-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | attribute', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('attribute', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"calculator/tests/unit/models/attributes-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | attributes', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('attributes', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"calculator/tests/unit/models/theme-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | theme', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('theme', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"calculator/tests/unit/models/themes-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | themes', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('themes', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"calculator/tests/unit/routes/colors-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | colors', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:colors');\n      assert.ok(route);\n    });\n  });\n});","define(\"calculator/tests/unit/routes/home-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | home', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:home');\n      assert.ok(route);\n    });\n  });\n});","define(\"calculator/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define(\"calculator/tests/unit/routes/theme-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | theme', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:theme');\n      assert.ok(route);\n    });\n  });\n});","define('calculator/config/environment', [], function() {\n  var prefix = 'calculator';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('calculator/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}