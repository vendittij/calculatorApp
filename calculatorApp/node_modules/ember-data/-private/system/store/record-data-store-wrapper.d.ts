import { RecordDataStoreWrapper as IRecordDataStoreWrapper } from "../../ts-interfaces/record-data-store-wrapper";
export default class RecordDataStoreWrapper implements IRecordDataStoreWrapper {
    store: any;
    _willUpdateManyArrays: boolean;
    _pendingManyArrayUpdates: string[];
    constructor(store: any);
    _scheduleManyArrayUpdate(modelName: any, id: any, clientId: any, key: any): void;
    _flushPendingManyArrayUpdates(): void;
    attributesDefinitionFor(modelName: any): any;
    relationshipsDefinitionFor(modelName: any): any;
    inverseForRelationship(modelName: any, key: any): any;
    inverseIsAsyncForRelationship(modelName: any, key: any): any;
    notifyPropertyChange(modelName: any, id: any, clientId: any, key: any): void;
    notifyHasManyChange(modelName: any, id: any, clientId: any, key: any): void;
    notifyBelongsToChange(modelName: any, id: any, clientId: any, key: any): void;
    recordDataFor(modelName: any, id: any, clientId: any): any;
    setRecordId(modelName: any, id: any, clientId: any): void;
    isRecordInUse(modelName: any, id: any, clientId: any): any;
    disconnectRecord(modelName: any, id: any, clientId: any): void;
}
